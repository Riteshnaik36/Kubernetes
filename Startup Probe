In Kubernetes, a Startup Probe is a special type of probe that is used to determine whether a container has successfully started. 
If the startup probe fails, Kubernetes will treat the container as having failed to start and will trigger a container restart. 
Unlike the liveness probe, which checks if a container is running properly after it has started, and the readiness probe, which checks if the container is ready to serve traffic, 
the startup probe focuses specifically on the initialization phase of the container.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Purpose of Startup Probes:
- - Startup Handling: The startup probe is used to handle cases where a container may take a longer time to start up than the typical liveness or readiness checks would allow. 
This is particularly useful for applications with slow initialization processes, such as databases or services that load large datasets during startup.

- - Preventing False Failures: Without a startup probe, Kubernetes might prematurely consider the container as unhealthy (and possibly restart it) if the container takes too long to start. 
A startup probe ensures that Kubernetes doesn't interfere with the container during its startup phase.

- - Separate from Liveness and Readiness: It acts independently of liveness and readiness probes, providing a grace period specifically for startup. 
Once the container is up and running and the startup probe passes, the liveness and readiness probes will take over.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

How Startup Probes Work:
The startup probe checks whether the application inside the container has completed its startup process. If it passes, Kubernetes starts using the liveness and readiness probes. 
If the startup probe fails, Kubernetes will restart the container.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Key Parameters for Startup Probe:
- - httpGet: Similar to other probes, the startup probe can use an HTTP GET request to check an endpoint.
- - tcpSocket: It can check if the container is accepting connections on a specific TCP port.
- - exec: A command can be run inside the container to determine whether the startup process has completed.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Configuration Parameters for Startup Probes:
- - initialDelaySeconds: The time in seconds to wait before starting the first probe. For a startup probe, this is typically set to a higher value because you expect the container to take some time to start up.
- - periodSeconds: The interval (in seconds) between each probe.
- - timeoutSeconds: The time to wait for the probe to respond before considering it a failure.
- - failureThreshold: The number of consecutive failures required before Kubernetes considers the container to have failed to start and restarts it.
- - successThreshold: The number of consecutive successes required before the container is considered started and normal probes (liveness and readiness) take over.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example of Startup Probe in a Pod Spec:
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
    - name: my-container
      image: my-image:latest
      startupProbe:
        httpGet:
          path: /startup
          port: 8080
        initialDelaySeconds: 15  # Wait for 15 seconds before starting the first probe
        periodSeconds: 10        # Probe every 10 seconds
        timeoutSeconds: 5        # Timeout if probe does not complete in 5 seconds
        failureThreshold: 30     # Fail after 30 consecutive failures
        successThreshold: 1      # Only need 1 successful probe to be considered started


Key Components of the Example:
- - startupProbe: Defines the startup check for the container.
- - httpGet: Kubernetes will send an HTTP GET request to the /startup endpoint on port 8080 to verify that the application has successfully started.
- - initialDelaySeconds: 15: Kubernetes waits for 15 seconds before performing the first startup probe to allow the container some time to initialize.
- - periodSeconds: 10: Kubernetes will check the startup probe every 10 seconds after the initial delay.
- - timeoutSeconds: 5: If the probe takes longer than 5 seconds to respond, it will be considered a failure.
- - failureThreshold: 30: If the probe fails 30 times in a row, Kubernetes will restart the container.
- - successThreshold: 1: After 1 successful probe, Kubernetes considers the container to be successfully started, and it can begin using the liveness and readiness probes.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Benefits of Startup Probes:
- - Handling Slow Startups: They are ideal for applications that take a long time to initialize. Without a startup probe, Kubernetes might mistakenly trigger a restart due to timeouts in the liveness or readiness probes.
- - Graceful Initialization: Kubernetes will wait until the container has fully started before starting liveness and readiness checks, which helps in avoiding premature failure detections.
- - Customization: Startup probes allow you to fine-tune the startup process for containers with specific needs, such as waiting for an external service, loading data, or performing complex initialization tasks.
- - Decoupling from Liveness and Readiness: The startup probe operates independently, which means it doesn't affect the normal liveness or readiness probes once the application is ready.
